<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2022/06/12/hello-world/"/>
    <url>/blog/2022/06/12/hello-world/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="title-旧博客地址"><a href="#title-旧博客地址" class="headerlink" title="title:旧博客地址"></a>title:旧博客地址</h2><h2 id="👟旧博客地址"><a href="#👟旧博客地址" class="headerlink" title="👟旧博客地址"></a>👟旧博客地址</h2><p>链接： </p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs html">https://www.cnblogs.com/Julien1021/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>博客CSS样式无法加载问题</title>
    <link href="/blog/2022/06/01/%E5%8D%9A%E5%AE%A2CSS%E6%A0%B7%E5%BC%8F%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/"/>
    <url>/blog/2022/06/01/%E5%8D%9A%E5%AE%A2CSS%E6%A0%B7%E5%BC%8F%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="📑Hexo博客常见问题"><a href="#📑Hexo博客常见问题" class="headerlink" title="📑Hexo博客常见问题"></a>📑Hexo博客常见问题</h1><h2 id="🎆问题描述01："><a href="#🎆问题描述01：" class="headerlink" title="🎆问题描述01："></a>🎆问题描述01：</h2><p>博客CSS样式出现错误，之前搭建的博客，突然间，样式完全乱了，手机端打开如下图所示：</p><p><img src="image-20220601222414071.png" alt="image-20220601222414071"></p><p>解决方案如下：</p><ul><li>网站网页按下”F12”键，点击红色错误按钮，网站显示的报错如下图所示：</li></ul><p><img src="image-20220601222753684.png" alt="image-20220601222753684"></p><p>这个时候我们便可对故障进行排错：</p><h6 id="问题症结："><a href="#问题症结：" class="headerlink" title="问题症结："></a>问题症结：</h6><p>jsd挂了</p><p>具体步骤：</p><ol><li>打开VsCode 点击”放大镜”搜索按钮，对整个blog文档搜索</li><li>搜索内容：<code>cdn.jsdelivr.net</code>,将 <code>cdn</code> 替换为 <code>fastly</code></li><li>回车，全局替换即可</li></ol><p><img src="image-20220601223047731.png" alt="image-20220601223047731"></p><h2 id="🎇问题描述02："><a href="#🎇问题描述02：" class="headerlink" title="🎇问题描述02："></a>🎇问题描述02：</h2><p>本地部署正常，但是网页发布点开样式乱了</p><h6 id="问题症结：-1"><a href="#问题症结：-1" class="headerlink" title="问题症结："></a>问题症结：</h6><p>配置偏差</p><p>具体方法如下：</p><ul><li>打开VsCode，打开 <code>_config.yum</code> ，修改url 和 root，如下图所示：</li></ul><p><img src="image-20220601223401948.png" alt="image-20220601223401948"></p><ul><li>url获取，打开GitHub，如下图所示： </li></ul><p><img src="image-20220601224112278.png" alt="image-20220601224112278"></p><ul><li>root 的路径，复制即可，如下图所示：</li></ul><p><img src="image-20220601224234321.png" alt="image-20220601224234321"></p><ul><li>点击VsCode <code>终端</code> ，输入 <code> npx hexo s</code> 刷新即可，若成功，如下图所示：</li></ul><p><img src="image-20220601224426782.png" alt="image-20220601224426782"></p><h2 id="🎭问题描述："><a href="#🎭问题描述：" class="headerlink" title="🎭问题描述："></a>🎭问题描述：</h2><p>问题描述：</p><p><img src="image-20220601224654684.png" alt="image-20220601224654684"></p><h6 id="问题症结：-2"><a href="#问题症结：-2" class="headerlink" title="问题症结："></a>问题症结：</h6><p>端口号被占用（貌似经常出现这样的情况）</p><p><strong>解决方法如下：</strong></p><ul><li>打开VsCode 中 <code>node_modules</code> 中的<code>hexo_server</code> 中的 <code>index.js</code> </li><li>修改端口号，如下图所示：</li></ul><p><img src="image-20220601224903238.png" alt="image-20220601224903238"></p><ul><li><code>npx hexo s</code> 刷新，若成功，如下图所示：</li></ul><p><img src="image-20220601225158201.png" alt="image-20220601225158201"></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Task01Week</title>
    <link href="/blog/2022/05/31/Task01Week/"/>
    <url>/blog/2022/05/31/Task01Week/</url>
    
    <content type="html"><![CDATA[<h1 id="🎯TaskWeek01"><a href="#🎯TaskWeek01" class="headerlink" title="🎯TaskWeek01"></a>🎯TaskWeek01</h1><h1 id="🧪1-图文并茂解释开源协定的区别？"><a href="#🧪1-图文并茂解释开源协定的区别？" class="headerlink" title="🧪1.图文并茂解释开源协定的区别？"></a>🧪1.图文并茂解释开源协定的区别？</h1><h3 id="开源（GPL、BSD、Apache和双授协议的区别）"><a href="#开源（GPL、BSD、Apache和双授协议的区别）" class="headerlink" title="开源（GPL、BSD、Apache和双授协议的区别）"></a>开源（GPL、BSD、Apache和双授协议的区别）</h3><h4 id="开源的协议大致分为六种：GPL-LGPL-BSD-MIT-Apache等。"><a href="#开源的协议大致分为六种：GPL-LGPL-BSD-MIT-Apache等。" class="headerlink" title="开源的协议大致分为六种：GPL,LGPL,BSD,MIT,Apache等。"></a>开源的协议大致分为六种：GPL,LGPL,BSD,MIT,Apache等。</h4><p>关于开源，今天大家估计，耳熟能详到习以为然，但是这个概念大概可以延续到个世纪RadHat和CentOS之家的角逐，RadHat是Linux为编译降低门槛让更多的程序员使用的开行版的其中一个版本，当时几乎一家独大，他们收取巨大的金额为购买的客户提供代码售后的服务，但是在每次完善修复的时候只提供为厂家源码，而这些源码对于技术人的门极高，就算有看得到的程序员也无法修改，为此，赚取了大量的服务费用。但是，很大社区的程序员觉得这是一种技术垄断，咬牙看不下去了，自觉形成社区，利用下班时间写写代码，编写了供商业免费开源使用的CentOS和RadHat抗衡，但是购买RadHat的厂家一般为实力强大的金主爸爸，不差钱，买的不是技术而是维修质量的售后服务，于是开源代码和工具只能运用于非传统行业，资金上差钱和差点意思的互联网公司。</p><p>但是，开源之站并没有结束。企业开源的收入来源于开源代码的募捐和社区人员使用后有志之士提供的Bug解决方案，越是权威有名气的公司，使用的人数越多，捐募的金额也就越大，使用的人数越多，系统完善的程度便越完整。于是便制定了开源的协议。</p><p>GPI：General Public License,是一种保证共享和修改的协议。这是最为著名的开源协议，因其制定的初心是保护开源的代码版权不受侵害，但是反其道被自身蚕食，但凡源码有一点GPI协议便定义为开源代码，而很大公司的业务是保密的，一旦开源便无商业机密可言，使得许多公司避GPI而不及。</p><p>于是，后面便对开源的定义放宽看要求，如BCD和Apache协议，但是大家对开源的代码还是持非常谨慎的态度。</p><p>直到现在，开源代码的协议得到基本的完善，有“双授协议”，一部分开源，一部分涉及商业机密的则不开源，让企业既可以利用开源代码让更多人使用，也保全了公司的整体利益。</p><h6 id="开源许可证GPL、BSD、MIT、Mozilla、Apache和LGPL的区别"><a href="#开源许可证GPL、BSD、MIT、Mozilla、Apache和LGPL的区别" class="headerlink" title="开源许可证GPL、BSD、MIT、Mozilla、Apache和LGPL的区别"></a>开源许可证GPL、BSD、MIT、Mozilla、Apache和LGPL的区别</h6><p><img src="image-20220531214605736.png" alt="image-20220531214605736"></p><h1 id="🥏2-安装centos-ubuntu系统"><a href="#🥏2-安装centos-ubuntu系统" class="headerlink" title="🥏2.安装centos ubuntu系统"></a>🥏2.安装centos ubuntu系统</h1><h5 id="CentOS-7安装配置"><a href="#CentOS-7安装配置" class="headerlink" title="CentOS 7安装配置"></a>CentOS 7安装配置</h5><ul><li>VM/新建虚拟机/典型安装/ 稍后安装操作系统/Linux 选择64对应版本号/新建文件夹</li><li>磁盘大小一般设置200G，选择将虚拟磁盘转为单个文件，如下图所示：</li></ul><p><img src="image-20220531215137651.png" alt="image-20220531215137651"></p><ul><li>虚拟机硬件设置：内存2G，处理器2颗，硬盘200G，选择下载好的iso镜像，如下图所示：</li></ul><p><img src="image-20220531215201524.png" alt="image-20220531215201524"></p><ul><li> 网络链接设置：VM/编辑/NAT模式/管理员设置/设置“子网”/点击DHCP设置/修改起始IP地址，如下图所示：</li></ul><p><img src="image-20220531215221753.png" alt="image-20220531215221753"></p><ul><li>开启虚拟机/选择第二项，回车（校正ios镜像哈希值）<ul><li>选择语言</li><li>选择时区——shanghai</li></ul></li></ul><p><img src="image-20220531215244476.png" alt="image-20220531215244476"></p><ul><li>选择界面，Server with GUI （带图形界面），Minimal Innstall（默认），如下图所示：</li></ul><p><img src="image-20220531215308387.png" alt="image-20220531215308387"></p><ul><li>选择自动设置，如图所示：</li></ul><p><img src="image-20220531215337700.png" alt="image-20220531215337700"></p><ul><li>硬盘参数设置，选择Standard Partition（/100G，/boot 1G ，/data 50G ， swap 2G/centos8 4G），ext4/)</li><li>网络设置：打开网络/确认是否链接地址/修改设备昵称，如下图所示：</li></ul><p><img src="image-20220531215358502.png" alt="image-20220531215358502"></p><ul><li>设置用户名和密码，如下图所示：</li></ul><p><img src="image-20220531215421204.png" alt="image-20220531215421204"></p><p>（以上内容为本人旧博客内容：<a href="https://www.cnblogs.com/Julien1021/p/16211468.html">CentOS 7安装与设置 - 林清|Julien - 博客园 (cnblogs.com)</a>）</p><h1 id="🧢3-ifconfig-VS-ip-addr-list-查询ip地址"><a href="#🧢3-ifconfig-VS-ip-addr-list-查询ip地址" class="headerlink" title="🧢3.ifconfig VS ip addr list 查询ip地址"></a>🧢3.ifconfig VS ip addr list 查询ip地址</h1><h6 id="ifconfig-VS-ip-addr-list-区别？"><a href="#ifconfig-VS-ip-addr-list-区别？" class="headerlink" title="ifconfig VS ip addr list 区别？"></a>ifconfig VS ip addr list 区别？</h6><p>两者都是用来查询linux网络配置的内部命令，唯一区别是：你会发现在一些centos或者unubtu版本使用”ifconfig”命令并不能生效，原因是”ifconfig”是最早的命令，而随着软件的更新迭代，一些软件已经放弃了使用”ifconfig”这辆”老爷车”，而只支持”ip addr list”的新能电动源车。</p><p><code>ifconfig</code></p><p><img src="image-20220531220215256.png" alt="image-20220531220215256"></p><p><code>而&quot;ip addr list&quot;太啰嗦，使用率又高，于是可以直接缩写为&quot;ip a l&quot;，具体内容如下图所示：</code></p><p><img src="image-20220531220350369.png" alt="image-20220531220350369"></p><h1 id="🧣4-Linux-FHS结构"><a href="#🧣4-Linux-FHS结构" class="headerlink" title="🧣4.Linux FHS结构"></a>🧣4.Linux FHS结构</h1><p>Linux FHS结构：Filesystem Hierarchy Standard（FHS，文件系统层次化标准）标准。</p><p>说人话便是：Linxu的标准目录结构。</p><h6 id="why-FHS？FHS的诞生解决了什么问题？"><a href="#why-FHS？FHS的诞生解决了什么问题？" class="headerlink" title="why FHS？FHS的诞生解决了什么问题？"></a>why FHS？FHS的诞生解决了什么问题？</h6><p>Linxu的标准目录结构，奥卡姆剃刀原则：如无必要，则无新添，Linux FHS 产生是解决了文件规范问题，让Linux文件标准化。因为Linux是一款以”自由”为核心的软件，早期大家使用Linux都DIY自己设置自己的Linux目录结构，但是这样会产生很大的问题，于是Linux便出出台了目录的标准，将目录结构文件分类且规范了，更加易于使用者的操作和文件配置。</p><h6 id="what-is-FHS？"><a href="#what-is-FHS？" class="headerlink" title="what is FHS？"></a>what is FHS？</h6><p>Linux目录结构，如下图所示：</p><p><img src="image-20220531222339629.png" alt="image-20220531222339629"></p><p>而这个目录结构也深刻体现了Linux的哲学思想：</p><ol><li>一切皆为文件</li><li>一个程序只做一件事情</li><li>避免和用户进行交互</li><li>文件都以文本的存储和配置</li></ol><p>结合设计者对Linux的设计理念便可分析Linux 的目录结构：</p><ul><li>一个程序只做一件事情<ul><li>bin — 系统启动时需要的执行文件（二进制）</li><li>sbin — 可执行程序的目录，但大多存放涉及系统管理的命令，只有root权限才能执行</li><li>proc — 虚拟，存在linux内核镜像</li></ul></li><li>在Linux中，可以理解为有user和root管理者，而被管理的Linux仓库又分为”临时仓库”和”固定仓库”<ul><li>管理者<ul><li>user</li><li>root</li></ul></li><li>临时仓库<ul><li>tmp — 临时文件目录，系统启动后的临时文件存放在/var/tmp</li><li>mnt — 临时用于挂载文件系统的地方</li></ul></li><li>固定仓库<ul><li>lib — 根文件系统目录下程序和核心模块的公共库（grub）</li><li>boot — 引导加载器所需文件，系统所需图片保存于此</li><li>dev — 设备文件目录</li><li>etc — 配置文件</li><li>home — 存储普通用户的个人文件</li></ul></li></ul></li></ul><p>其中文件又分为两大类，如下图所示：</p><p><img src="image-20220531224111911.png" alt="image-20220531224111911"></p><h1 id="【参考文档】"><a href="#【参考文档】" class="headerlink" title="【参考文档】"></a>【参考文档】</h1><p><a href="https://www.cnblogs.com/laov/p/3409875.html">https://www.cnblogs.com/laov/p/3409875.html</a></p><p><a href="https://www.cnblogs.com/happyframework/p/4480228.html">Linux：FHS标准 - 幸福框架 - 博客园 (cnblogs.com)</a></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>学习测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linu系统启动和内核管理</title>
    <link href="/blog/2022/05/30/Linu%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%92%8C%E5%86%85%E6%A0%B8%E7%AE%A1%E7%90%86/"/>
    <url>/blog/2022/05/30/Linu%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%92%8C%E5%86%85%E6%A0%B8%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="🥼16-4-Linux-系统启动和内核管理"><a href="#🥼16-4-Linux-系统启动和内核管理" class="headerlink" title="🥼16.4 Linux 系统启动和内核管理"></a>🥼16.4 Linux 系统启动和内核管理</h1><h1 id="🔑Linux启动整个流程："><a href="#🔑Linux启动整个流程：" class="headerlink" title="🔑Linux启动整个流程："></a>🔑Linux启动整个流程：</h1><p>如图所示：</p><p><img src="image-20220530230820507.png" alt="image-20220530230820507"></p><ul><li>硬件启动<ul><li>打开电源</li><li>Bios</li><li>MBR</li></ul></li><li><strong>grup引导启动</strong><ul><li>Stage1阶段</li><li>Srage1.5阶段</li><li>Stage2阶段</li></ul></li><li>内核引导启动</li><li>系统初始化<ul><li>/etc/inittab</li><li>/etc/rc.sysinit</li><li>加载系统服务</li></ul></li><li>启动终端<ul><li>默认启动/sbin/mingetty </li><li>验证登录</li><li>登录成功</li></ul></li><li>如果级别为“5”，打开X-window</li></ul><p>简单理解Linux整个启动流程便是：POST加电自检——MBR引导——GRUB——加载内核</p><h2 id="🎾what-is-“grub”？"><a href="#🎾what-is-“grub”？" class="headerlink" title="🎾what is “grub”？"></a>🎾what is “grub”？</h2><p>简答理解grub = 硬件启动OS（操作系统）的中介。</p><p>但是当我们出现误删”grub”文件会出现什么样的结果？显然，我们的Linux将会无法正常启动。</p><h4 id="how-修复”grub”文件？"><a href="#how-修复”grub”文件？" class="headerlink" title="how 修复”grub”文件？"></a>how 修复”grub”文件？</h4><p>在CentOS中，我们在修复grub文件的时候，需要特别注意的是：需要自动添加grub的配置文件，因为在系统恢复当中没有恢复这一环，而需要我们使用者手动进行文件的配置添加，如下图所示：</p><p><img src="image-20220530231407710.png" alt="image-20220530231407710"></p><h5 id="安装grub的两种方法："><a href="#安装grub的两种方法：" class="headerlink" title="安装grub的两种方法："></a>安装grub的两种方法：</h5><h6 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h6><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">grub-install --root-directory=DIR <span class="hljs-regexp">/dev/</span>DISK  安装grub stage和stage1 <span class="hljs-number">5</span>到 <span class="hljs-regexp">/dev/</span>DISK磁盘上，并复制GRUB相关文件到DIR/boot目录下<br></code></pre></td></tr></table></figure><h6 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h6><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">grub</span> &gt; root (hd,<span class="hljs-comment">#)</span><br>grub &gt; setup (hd,<span class="hljs-comment">#)</span><br></code></pre></td></tr></table></figure><p>进入救援模式：（开机0.5秒内安装Esc键）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">chroot <span class="hljs-regexp">/mnt/</span>sysimage/<br>grub install <span class="hljs-regexp">/dev/</span>sda<br></code></pre></td></tr></table></figure><p><img src="image-20220530232149177.png" alt="image-20220530232149177"></p><p><code>vim /boot/grub/grub.conf</code></p><p><img src="image-20220530232219478.png" alt="image-20220530232219478"></p><h4 id="第二阶段grub补救方法"><a href="#第二阶段grub补救方法" class="headerlink" title="第二阶段grub补救方法"></a><strong>第二阶段grub补救方法</strong></h4><p>在上述对grub简介当中，grub在Linux引导系统启动状态大致可分为三个阶段，当grub处于第一个阶段顺利完成进行，但是第二个引导阶段文件丢失我们该如何修复？<br>在进入上述的救援模式情况下，当进入如下界面时：</p><p><img src="image-20220530232833837.png" alt="image-20220530232833837"></p><p>适用于文件被意外移除等情况</p><p><code>e————对配置文件再次进行修改</code></p><p><img src="image-20220530232951839.png" alt="image-20220530232951839"></p><h1 id="📱Linux内核修复"><a href="#📱Linux内核修复" class="headerlink" title="📱Linux内核修复"></a>📱Linux内核修复</h1><h2 id="how-修复内核？"><a href="#how-修复内核？" class="headerlink" title="how 修复内核？"></a>how 修复内核？</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ramdisk文件的制作：<br>#mkinitrd命令<br>mkinitrd /boot/initramfs-<span class="hljs-constructor">$(<span class="hljs-params">uname</span> -<span class="hljs-params">r</span>)</span>.img <span class="hljs-constructor">$(<span class="hljs-params">uname</span> -<span class="hljs-params">r</span>)</span><br><br>#dracut命令<br>dracut /boot/initramfs-<span class="hljs-constructor">$(<span class="hljs-params">uname</span> -<span class="hljs-params">r</span>)</span>.img #(uname -r)<br></code></pre></td></tr></table></figure><h4 id="why-内核”s””k”两个文件代表的含义？"><a href="#why-内核”s””k”两个文件代表的含义？" class="headerlink" title="why 内核”s””k”两个文件代表的含义？"></a>why 内核”s””k”两个文件代表的含义？</h4><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">s</span>---&gt;</span>（<span class="hljs-number">95</span>）开头（start）文件启动<br><span class="hljs-function"><span class="hljs-title">k</span>---&gt;</span>（<span class="hljs-number">5</span>）开头，停止<br>k的数值&gt;s的数值，优先级k&gt;s，类似于“栈”的原理，s文件越大，k文件越小。<br></code></pre></td></tr></table></figure><h4 id="how-Linux如何运用Windows的磁盘分区？"><a href="#how-Linux如何运用Windows的磁盘分区？" class="headerlink" title="how Linux如何运用Windows的磁盘分区？"></a>how Linux如何运用Windows的磁盘分区？</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">电脑-计算机管理-存储、磁盘管理-新建分区-快速完成<br><br><span class="hljs-keyword">vm</span>-设置-添加-硬盘-下一步-SICI-添加硬件导向（选择第三项：使用物理磁盘）-下一步-选择磁盘，使用单个分区-快速完成<br></code></pre></td></tr></table></figure><h1 id="🧨how-破解root密码"><a href="#🧨how-破解root密码" class="headerlink" title="🧨how 破解root密码"></a>🧨how 破解root密码</h1><p>基于centos 6，适用于忘记密码的情况下，进入救援模式，具体操作如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">ctrl+alt+ins<br>a<br><span class="hljs-number">1</span> s<span class="hljs-regexp">/S/</span>single<br>passwd<br>输入密码<br></code></pre></td></tr></table></figure><p>如何加密？</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">grub -crypt<br>输入秘密<br><br>vim <span class="hljs-regexp">/boot/g</span>rub/grub.conf<br>password --encrypt<br>:r!grub-crypt   <span class="hljs-regexp">//</span>导入密码<br>回车<br>密码（两遍）<br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>基础篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程和内存管理</title>
    <link href="/blog/2022/05/27/%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <url>/blog/2022/05/27/%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="🧵Linux进程和内存管理"><a href="#🧵Linux进程和内存管理" class="headerlink" title="🧵Linux进程和内存管理"></a>🧵Linux进程和内存管理</h1><h1 id="🎱what-是进程？"><a href="#🎱what-是进程？" class="headerlink" title="🎱what 是进程？"></a>🎱what 是进程？</h1><h6 id="内核的功能："><a href="#内核的功能：" class="headerlink" title="内核的功能："></a>内核的功能：</h6><ul><li>进程管理</li><li>内存管理</li><li>文件系统</li><li>网络功能</li><li>驱动程序</li><li>安全功能</li></ul><p>由此可见进程管理的概念地图，进程管理是属于内核功能管理的一个子集。</p><h6 id="进程的定义："><a href="#进程的定义：" class="headerlink" title="进程的定义："></a><strong>进程</strong>的定义：</h6><p>例如操作系统将一个二进制程序进入内核转化为进程。（也就是说：进程是程序运行的另一种状态）（详解：<a href="https://www.cnblogs.com/zyybky/p/12819564.html">linux 进程管理和内存分配 - 我听过 - 博客园 (cnblogs.com)</a>）</p><ul><li>多实例*（一个程序可同时运行多个进程</li><li>进程都有特定的ID用来被标识</li><li>进程的创建（第一个进程init，后续的父子进程）</li><li><strong>进程</strong>之间有一定的协助关系，同一进程的<strong>线程</strong>之间存在竞争关系</li></ul><h6 id="进程分类："><a href="#进程分类：" class="headerlink" title="进程分类："></a>进程分类：</h6><ol><li>守护进程： 在系统引导过程中启动的进程和终端无关的进程</li><li>前台进程：与终端相关，通过终端启动的进程</li></ol><p>但是上述两者进程可以实现相互的转换。</p><h6 id="进程和内存的关系？"><a href="#进程和内存的关系？" class="headerlink" title="进程和内存的关系？"></a>进程和内存的关系？</h6><p>进程可以简单理解为一个二进制程序进入内核，而后变成了执行程序：进程。因此，进程是一定占据部分内存的，但是进程对内存的管理方式不一，但大致分为静态和动态的分配和统一回收。</p><p>简单理解：进程=线程+（代码+数据）= 协程+（寄存器+栈），进程具体组成部分如下图所示：</p><img src="%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/image-20220527232242153.png" alt="image-20220527232242153" style="zoom:80%;" /><p>线程组成部分，如下图所示：</p><p><img src="image-20220527232333364.png" alt="image-20220527232333364"></p><h6 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h6><p>简单概括，进程中包含内存，而进程中的内存分配可拆分如下所示：</p><ol><li>栈：存放程序临时创建的局部变量</li><li>堆：存放进程运行中被动态分配的内存段</li><li>BSS：BSS段包含了程序中未初始化的全局变量，在内存中 bss段全部置零</li><li>数据段：存放可执行文件中已初始化全局变量</li><li>代码段：存放可执行文件的操作指令</li></ol><img src="%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/image-20220527232505133.png" alt="image-20220527232505133" style="zoom:33%;" /><h6 id="Linux-中的进程？"><a href="#Linux-中的进程？" class="headerlink" title="Linux 中的进程？"></a>Linux 中的进程？</h6><p><code>pstree -p</code>  查看Linux中进程的结构，以及 <code>单进程</code> 和 <code>多进程</code> 进程名称、进程的ID编号以及与线程之间的关系如下图所示：</p><p><img src="image-20220527231434612.png" alt="image-20220527231434612"></p><h3 id="🔬问题：为什么一颗CPU可以运行多个进程？"><a href="#🔬问题：为什么一颗CPU可以运行多个进程？" class="headerlink" title="🔬问题：为什么一颗CPU可以运行多个进程？"></a>🔬问题：为什么一颗CPU可以运行多个进程？</h3><p><strong>时间片</strong>：简单理解，cpu将时间分段，分别运行不同的程序。（因为最初电脑的一个cpu一次只对一个程序负责，但是一旦出现程序循环和崩溃的情况，电脑将无法执行下一个程序，故而产生了时间片的概念，均衡分配cpu在每个程序花费时间）</p><p><img src="image-20220527232904557.png" alt="image-20220527232904557"></p><h3 id="🧶问题：虚拟地址空间-VS-物理地址空间"><a href="#🧶问题：虚拟地址空间-VS-物理地址空间" class="headerlink" title="🧶问题：虚拟地址空间 VS  物理地址空间"></a>🧶问题：虚拟地址空间 VS  物理地址空间</h3><p>问题：进程每次运行分配的位置不一样，但为什么每次打开一个程序，内容显示的位置都一致？</p><p>🎍整个流程图：应用程序（虚拟地址）——OS（操作系统，CPU中<strong>MMU</strong>将虚拟地址转化为物理地址）——获取内存，运行程序</p><ul><li>程序运行在虚拟地址每次都不一样</li><li>每次程序打开的物理地址位置都是一样的（相当于Doctor Who 每次穿越的时间地址都不一样，但是电话亭内部的空间都一样）</li></ul><h3 id="⚾进程使用内存产生的问题"><a href="#⚾进程使用内存产生的问题" class="headerlink" title="⚾进程使用内存产生的问题"></a><strong>⚾进程使用内存产生的问题</strong></h3><ul><li>内存泄漏</li><li>内存溢出</li><li>内存不足</li></ul><h1 id="🏉how-进程的整个运行过程："><a href="#🏉how-进程的整个运行过程：" class="headerlink" title="🏉how 进程的整个运行过程："></a>🏉how 进程的整个运行过程：</h1><p>程序进入内核，进程的整个基本状态和转换，如下图所示：</p><p><img src="image-20220527233235189.png" alt="image-20220527233235189"></p><h3 id="🎭何为“僵尸态”进程？如何查看“僵尸态”"><a href="#🎭何为“僵尸态”进程？如何查看“僵尸态”" class="headerlink" title="🎭何为“僵尸态”进程？如何查看“僵尸态”"></a>🎭何为“僵尸态”进程？如何查看“僵尸态”</h3><h6 id="命令：显示进程的不同状态"><a href="#命令：显示进程的不同状态" class="headerlink" title="命令：显示进程的不同状态"></a>命令：显示进程的不同状态</h6><p><img src="image-20220527233312241.png" alt="image-20220527233312241"></p><figure class="highlight dos"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs dos">ps <span class="hljs-built_in">aux</span><br>Z状态则为僵尸态进程<br></code></pre></td></tr></table></figure><h6 id="why-僵死态进程产生的原因？"><a href="#why-僵死态进程产生的原因？" class="headerlink" title="why 僵死态进程产生的原因？"></a>why 僵死态进程产生的原因？</h6><ul><li>父进程被杀死，子进程无人收拾成为（Z），便成为僵尸态进程。</li></ul><h6 id="进程状态的分类"><a href="#进程状态的分类" class="headerlink" title="进程状态的分类"></a>进程状态的分类</h6><ol><li>运行态</li><li>就绪态</li><li>睡眠态</li><li>停止态</li><li>僵死态</li></ol><p>僵死态造成的危害不言而喻，粗俗理解：站在茅坑不拉屎，尸位素餐浪费进程资源。</p><h6 id="how-去除僵死态？"><a href="#how-去除僵死态？" class="headerlink" title="how 去除僵死态？"></a>how 去除僵死态？</h6><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kill</span> -<span class="hljs-number">18</span> <span class="hljs-number">1436</span>   //方法一：恢复父进程<br><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> <span class="hljs-number">1436</span>    //方法二：杀死父进程<br></code></pre></td></tr></table></figure><h3 id="🏑LRU算法：删除经常不用的数据"><a href="#🏑LRU算法：删除经常不用的数据" class="headerlink" title="🏑LRU算法：删除经常不用的数据"></a>🏑LRU算法：删除经常不用的数据</h3><p>文档：[LRU算法原理解析 - 再见紫罗兰 - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/linxiyue/p/10926944.html#:~:text=LRU%E5%8E%9F%E7%90%86">https://www.cnblogs.com/linxiyue/p/10926944.html#:~:text=LRU原理</a>. LRU 算法的设计原则是：如果一个数据在最近一段时间没有被访问到，那么在将来它被访问的可能性也很小。. 也就是说，当限定的空间已存满数据时，应当把最久没有被访问到的数据淘汰。. 根据 LRU原理和Redis实现 所示，假定系统为某进程分配了3个物理块，进程运行时的页面走向为 7,1 2 0 3 0 4，开始时3个物理块均为空，那么 LRU 算法是如下工作的：.)</p><p><img src="image-20220527234342674.png" alt="image-20220527234342674"></p><p>粗暴理解LRU算法，可以将之比喻为 <code>队列</code> 先进先去，喜新厌旧。</p><h1 id="📣how-进程之间如何通讯？"><a href="#📣how-进程之间如何通讯？" class="headerlink" title="📣how 进程之间如何通讯？"></a>📣how 进程之间如何通讯？</h1><h3 id="IPC-进程间通信"><a href="#IPC-进程间通信" class="headerlink" title="IPC-进程间通信"></a>IPC-进程间通信</h3><p>IPC为什么出现？IPC的定义？</p><ul><li>进程1 和 进程2 交换数据需要在通过内核开辟一个“缓冲区”，进程1把数据从用户空间拷到内核缓冲区，进程2再从内核缓冲区把数据读走，内核提供的这种机制称为进程间通信（IPC，InterProcess Communication）</li></ul><p><img src="image-20220527234534601.png" alt="image-20220527234534601"></p><p>IPC进程间通讯的不同方式：</p><p>可参考文档：<a href="https://www.jianshu.com/p/c1015f5ffa74">进程间通信IPC (InterProcess Communication) - 简书 (jianshu.com)</a></p><h3 id="进程管理工具"><a href="#进程管理工具" class="headerlink" title="进程管理工具"></a>进程管理工具</h3><p>进程优先级：</p><ul><li>系统优先级：1-139，数字越小，优先级越高</li><li>实时优先级：99-0，数值最大优先级最高</li><li>nice值：-20到19，对应系统优先级100-139</li></ul><h6 id="how命令查看优先级："><a href="#how命令查看优先级：" class="headerlink" title="how命令查看优先级："></a>how命令查看优先级：</h6><p><img src="image-20220527234838301.png" alt="image-20220527234838301"></p><h6 id="进程管理命令"><a href="#进程管理命令" class="headerlink" title="进程管理命令"></a>进程管理命令</h6><p>可参考文档：<a href="https://cloud.tencent.com/developer/article/1511100">linux进程管理：进程，程序，线程 &amp; 9个进程管理工具 &amp; 作业控制 - 云+社区 - 腾讯云 (tencent.com)</a></p><p><img src="image-20220527234944877.png" alt="image-20220527234944877"></p><h3 id="⛳问题：如何找到未知进程的执行程序文件路径？"><a href="#⛳问题：如何找到未知进程的执行程序文件路径？" class="headerlink" title="⛳问题：如何找到未知进程的执行程序文件路径？"></a>⛳问题：如何找到未知进程的执行程序文件路径？</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#ls -l /proc/1272/exe</span><br><span class="hljs-regexp">//</span> chattr  一般病毒挖矿都会带有<span class="hljs-string">&quot;chattr&quot;</span>特殊属性，不要让你删除，及时删除了也会及时的恢复，唯一的办法及时找到chattr的文件，删除<span class="hljs-string">&quot;chattr&quot;</span>的属性，然后将文件彻底的删除<br><span class="hljs-regexp">//</span>应急方法<br><span class="hljs-comment">#touch a;chattr +i a  //将病毒文件防放置文件内，这样程序就不会自动成为进程运行了</span><br></code></pre></td></tr></table></figure><p>进程和CPU之间绑定命令</p><p><code>\#taskset --help</code></p><p>查看进程编号</p><p><code>pststat</code></p><p>可用 <code>nice -n -10  ping 地址</code> 对进程优先级的调整 ，然后再查找进程</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#pgrep</span> -<span class="hljs-selector-tag">a</span> -t pst/<span class="hljs-number">1</span>    <span class="hljs-comment">//显示进程的名称</span><br></code></pre></td></tr></table></figure><p>**uptime ** 负载（5min，10min，15min）：负载最好不要超过5，不然系统中则出现了消耗非常大的进程。</p><p><img src="image-20220527235326610.png" alt="image-20220527235326610"></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>基础篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链接和软连接的区别</title>
    <link href="/blog/2022/05/25/%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/blog/2022/05/25/%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="🏑软硬链接的区别"><a href="#🏑软硬链接的区别" class="headerlink" title="🏑软硬链接的区别"></a>🏑软硬链接的区别</h1><h1 id="🎈what-软硬链接的定义？"><a href="#🎈what-软硬链接的定义？" class="headerlink" title="🎈what 软硬链接的定义？"></a>🎈what 软硬链接的定义？</h1><h6 id="Hard-Link-硬链接"><a href="#Hard-Link-硬链接" class="headerlink" title="Hard Link(硬链接)"></a>Hard Link(硬链接)</h6><p>每个文件对应一个 inode，文件的内容在存储在 inode 指向的 data block 中。要读取该文件的内容，需要通过文件所在的目录中记录的文件名找到文件的 inode 号，然后通过 inode 找到存储文件内容的 data block。</p><p><img src="image-20220525230418675.png" alt="image-20220525230418675"></p><h6 id="Symbolic-Link-软链接"><a href="#Symbolic-Link-软链接" class="headerlink" title="Symbolic Link(软链接)"></a>Symbolic Link(软链接)</h6><p>简单而言，创建软链接时会创建一个新的文件(分配一个 inode 和对应的 data block)，新文件的 data block 中存储了目标文件的路径。</p><p><img src="image-20220525230518747.png" alt="image-20220525230518747"></p><h1 id="🏒硬链接-VS-软链接"><a href="#🏒硬链接-VS-软链接" class="headerlink" title="🏒硬链接 VS 软链接"></a>🏒硬链接 VS 软链接</h1><h6 id="优缺点对比"><a href="#优缺点对比" class="headerlink" title="优缺点对比"></a>优缺点对比</h6><table><thead><tr><th></th><th><strong>定义</strong></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><strong>硬链接</strong></td><td>同一个文件起了多个名字</td><td>节点标号一样 = 同一个文件  几乎不占空间 “ll”命令可以显示连接数 （文件夹不能创建硬链接，但是会自动生成，一个<strong>文件夹</strong>硬链接数字一定&gt;=2,存在“.”隐藏文件）</td><td>不能跨分区域 不支持文件夹（会导致循环） 相对路径：自身目录</td></tr><tr><td><strong>软链接</strong></td><td>软/符号链接=相当于windows“快捷方式” = <strong>C语言当中的指针</strong></td><td>节点标号不一致=不是同类型的文件 支持跨设备和分区 文件类型：与源文件无关</td><td>相对路径：引用时，写入相对于“软链接”路径，而不是“原文件”路径</td></tr></tbody></table><h6 id="从九个维度区别软硬链接的不同"><a href="#从九个维度区别软硬链接的不同" class="headerlink" title="从九个维度区别软硬链接的不同"></a>从九个维度区别软硬链接的不同</h6><ol><li>本质<ul><li>硬链接：与原文件是同一个文件</li><li>软连接：与源文件文件类型不同</li></ul></li><li>跨设备<ul><li>硬链接：不支持</li><li>软连接：支持</li></ul></li><li>inode<ul><li>硬链接：相同</li><li>软连接：不同</li></ul></li><li>连接数<ul><li>硬链接：增删硬链接，连接数会随之增删</li><li>软连接：创建和删除，不影响链接数量</li></ul></li><li>文件夹<ul><li>硬链接：不支持</li><li>软连接：支持</li></ul></li><li>相对路径<ul><li>硬链接：路径相对于当前工作目录</li><li>软连接：原始文件的相对路径是相对于链接文件的相对路径</li></ul></li><li>删除源文件<ul><li>硬链接：连接数减少，但是不影响链接文件访问</li><li>软连接：链接文件无法访问</li></ul></li><li>文件类型<ul><li>硬链接：和源文件相同</li><li>软连接：与源文件不同</li></ul></li><li>文件大小<ul><li>硬链接：与源文件相同</li><li>软连接：与源文件不同</li></ul></li></ol><p>简单理解，软连接的诞生更像是未了弥补硬链接如不能跨平台和分区等却点，但是软连接也存在占用内存空间等一些缺点。</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>\u0016DHCP和TFTP服务管理</title>
    <link href="/blog/2022/05/24/DHCP%E5%92%8CTFTP%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <url>/blog/2022/05/24/DHCP%E5%92%8CTFTP%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="🏸-DHCP和TFTP服务管理"><a href="#🏸-DHCP和TFTP服务管理" class="headerlink" title="🏸 DHCP和TFTP服务管理"></a>🏸 DHCP和TFTP服务管理</h1><h4 id="what-is-DHCP？"><a href="#what-is-DHCP？" class="headerlink" title="what is DHCP？"></a>what is DHCP？</h4><p>详解：<a href="https://www.cnblogs.com/f-ck-need-u/p/7324199.html">第4章 DHCP服务 - 骏马金龙 - 博客园 (cnblogs.com)</a> </p><p>简单而言：DHCP(Dynamic Host Configuration Protocol),动态主机配置协议，是一个应用层协议。 </p><p>DHCP vs BOOTP</p><p>DHCP前身是BOOTP，在Linux的网卡配置中也能看到显示的是BOOTP，DHCP引进一个bootp没有的概念：租约。</p><ul><li>dhcp分配的地址是可以有期限的</li><li>bootp分配的地址是永久的 </li></ul><p>DHCPd大致可分为：</p><ul><li>客户端（端口68/UDP应用层协议）</li><li>服务端（端口67/UDP应用层协议）</li></ul><h6 id="DHCP-的用途？"><a href="#DHCP-的用途？" class="headerlink" title="DHCP 的用途？"></a>DHCP 的用途？</h6><ul><li>内部网络和网络服务供应商自动分配IP地址、子网掩码、网关、DNS。</li><li>内部网络管理员对所有电脑集中管理</li><li>自动化安装系统</li><li>解决IPV4资源不足的问题DHCP 的八种报文格式？</li></ul><p>详解：<a href="https://www.cnblogs.com/happygirl-zjj/p/5976526.html">DHCP 工作原理 - Rosanne - 博客园 (cnblogs.com)</a> </p><p>how DHCP向客户端请求的四个步骤（需要注意的是：实现HDCP服务前，先将网络已有的DHCP服务关闭，如：vmware中的DHCP等）  </p><ul><li>搜索</li><li>提供</li><li>选择</li><li>确认</li></ul><p><img src="image.png" alt="image"></p><h4 id="how-安装DHCP"><a href="#how-安装DHCP" class="headerlink" title="how 安装DHCP"></a>how 安装DHCP</h4><p>详解：</p><p>[(105条消息) yum安装dhcp安装包时报错的解决办法（<a href="https://blog.csdn.net/ycycyyc_/article/details/107152561">Errno 256] No more mirrors to try.—–或者睡眠中）_ycycyyc_的博客-CSDN博客</a> </p><p>[<a href="https://cloud.tencent.com/developer/article/1828009">985]No package *** available. Error: Nothing to do（更新yum源） - 云+社区 - 腾讯云 (tencent.com)</a> </p><h6 id="具体实操"><a href="#具体实操" class="headerlink" title="具体实操"></a>具体实操</h6><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">yum -y install dhcp-server<br>rpm -ql dhcp-server<br>systemctl status dhcpd<br>systemctl enable --now dhcpd<br>发现报错<br>rpm -ql dhcp-server<br>vim <span class="hljs-regexp">/etc/</span>dhcp/dhcp.conf<br>cp <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/doc/</span>dhcp-server<span class="hljs-regexp">/dhcpd.conf.example /</span>etc<span class="hljs-regexp">/dhcp/</span>dhcpd.conf<br>y<br>vim <span class="hljs-regexp">/etc/</span>dhcp/dhcp.conf<br>systemctl start dhcpd  <span class="hljs-regexp">//</span>依然启动不了<br>vim <span class="hljs-regexp">/etc/</span>dhcp/dhcp.conf<br></code></pre></td></tr></table></figure><p><img src="19.1.png" alt="19.1"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">systemctl start dhcpd<br>vim <span class="hljs-regexp">/etc/</span>dhcp/dhc.conf<br></code></pre></td></tr></table></figure><p><img src="19.2-1653357108027.png" alt="19.2"></p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start dhcpd<br><span class="hljs-params">system</span>ctl status dhcpd<br><span class="hljs-params">system</span>ctl restart dhcpd<br></code></pre></td></tr></table></figure><h6 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h6><p>centos 每次Tab键空格设置为4格数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#vim /etc/vimrc</span><br>最后一行添加<br><span class="hljs-built_in">set</span> <span class="hljs-attribute">tabstop</span>=4<br>ZZ<br></code></pre></td></tr></table></figure><p><strong>安装工具</strong></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">yum -y install tftp-<span class="hljs-keyword">server</span><br>rpm -ql tftp-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p><img src="19.3-1653357164979.png" alt="19.3"></p><!--more-!>]]></content>
    
    
    <categories>
      
      <category>基础篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu用户密码</title>
    <link href="/blog/2022/05/22/ubuntu%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/"/>
    <url>/blog/2022/05/22/ubuntu%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu遗忘用户密码·解决方法"><a href="#ubuntu遗忘用户密码·解决方法" class="headerlink" title="ubuntu遗忘用户密码·解决方法"></a>ubuntu遗忘用户密码·解决方法</h1><p>假使你忘记ubuntu用户密码，如何修改用户密码？</p><ul><li>重启ubuntu</li><li>出现虚拟机界面后长按“Shift”键，进入grub菜单</li><li>依次分别选择第二项，进入高级模式”recovery mode”</li><li>进入Recovery Menu界面后，选择root Drop to root shell prompt，获取root权限，如下图所示</li></ul><p><img src="U111.png" alt="U111"></p><ul><li><p><code>cat /etc/shadow</code>查看用户名</p></li><li><p><img src="U2.png" alt="U2"><code>passwd julien</code>passwd+root/用户名，输入新密码进行修改</p></li></ul><p><img src="U4%20(2).png" alt="U4 (2)"></p><ul><li><code>reboot</code>重启ubuntu再次登录</li></ul><p><img src="U4%20(1).png" alt="U4 (1)"></p><ul><li>至此，ubuntu修改密码便完成</li></ul><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>基础篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NTP时间同步</title>
    <link href="/blog/2022/05/19/NTP%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/"/>
    <url>/blog/2022/05/19/NTP%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="🏓19-2时间同步服务和SELinux安全管理"><a href="#🏓19-2时间同步服务和SELinux安全管理" class="headerlink" title="🏓19.2时间同步服务和SELinux安全管理"></a>🏓19.2时间同步服务和SELinux安全管理</h1><h3 id="⛳关键问题："><a href="#⛳关键问题：" class="headerlink" title="⛳关键问题："></a>⛳关键问题：</h3><h4 id="why为什么需要时间同步？"><a href="#why为什么需要时间同步？" class="headerlink" title="why为什么需要时间同步？"></a>why为什么需要时间同步？</h4><p>详解： <a href="https://blog.csdn.net/zyddj123/article/details/86560921">(105条消息) Linux系统时间同步方法小结_清晨一场梦的博客-CSDN博客_linux系统时间同步命令</a></p><p>系统的”时间同步”尤其是“加密服务”，时间不统一会导致证书过期，不能顺利的访问网站，由此可见<strong>，时间同步</strong>对系统产生会非常重要的影响。</p><h6 id="Windows-VS-Linux-的时间同步"><a href="#Windows-VS-Linux-的时间同步" class="headerlink" title="Windows VS Linux 的时间同步"></a>Windows VS Linux 的时间同步</h6><p><strong>Windows的时间同步</strong>：开机时，从硬件BIOS时钟获取时间（Windows时间同步*软件时间 = 硬件时间），实现同步。</p><p><strong>Linux 的时间同步</strong> ：软硬件时间异步，且互不干扰，硬件时间来源：BIOS时钟；软件时间来源：CPU Tick。且开始时，系统时间 = 硬件时间。</p><h4 id="what-is-NTP？"><a href="#what-is-NTP？" class="headerlink" title="what is NTP？"></a>what is NTP？</h4><p>Network Time Protocol (NTP) ，网络同步时间协议，简单而言便是同步网络中各个计算机软硬件时间的协议。</p><p>安装命令</p><p><code>yum -y install ntp</code></p><p>所属配置文件</p><p><code>/etc/ntp.conf</code></p><p>NTP=时间同步服务器，其工作原理如下图所示：</p><p><img src="image-20220519210406805.png" alt="image-20220519210406805"></p><h4 id="♟how-Linux中时间同步软件实现："><a href="#♟how-Linux中时间同步软件实现：" class="headerlink" title="♟how Linux中时间同步软件实现："></a><strong>♟how</strong> Linux中时间同步软件实现：</h4><ul><li> ntp(旧版工具)</li><li><strong>chrony</strong>（精度更加准确）</li></ul><p>具体实操如下所示：</p><figure class="highlight axapta"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs axapta">yum -y install chrony  <span class="hljs-comment">//安装chrony工具</span><br>rpm -qi chrony      <span class="hljs-comment">//确认软件包是否安装</span><br>vim /etc/chrony.conf<br>添加<br><span class="hljs-keyword">server</span> ntp.aliyun.com iburst<br><span class="hljs-keyword">server</span> ntp1.aliyun.com iburst<br><span class="hljs-keyword">server</span> ntp2.aliyun.com iburst<br><br><span class="hljs-meta">#</span><br>allow <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">0</span> <span class="hljs-comment">//指定允许同步的网段</span><br><br><span class="hljs-meta">#service time even if not synchronized to a time source.</span><br>local stratum <span class="hljs-number">10</span> <span class="hljs-comment">//当互联网无法链接，仍然可以为客户端提供时间同步服务</span><br><br>:wq/ZZ<br>systemctl restart chronyd<br>chronyc sources -v   <span class="hljs-comment">//查询“*”表示实现时间同步</span><br></code></pre></td></tr></table></figure><p>输入如下命令</p><p><code>chronyc sources -v</code></p><p>如下图所示，则时间同步成功</p><p><img src="image-20220519210929609.png" alt="image-20220519210929609"></p><h6 id="公共NTP服务："><a href="#公共NTP服务：" class="headerlink" title="公共NTP服务："></a>公共NTP服务：</h6><ul><li>阿里云公共NTP<ul><li>Linux:ntp:aliyun.com  </li><li> ntp1-7.aliyun.com</li></ul></li><li>腾讯公共NTP<ul><li>time1-5.cloud.tencent.com</li></ul></li><li>国家授时中心服务器：210.72.145.44</li></ul><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>基础篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CA认证</title>
    <link href="/blog/2022/05/17/CA%E8%AE%A4%E8%AF%81/"/>
    <url>/blog/2022/05/17/CA%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><span id="more"></span>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7如何优雅的开启救援模式</title>
    <link href="/blog/2022/05/17/%E6%95%91%E6%8F%B4%E6%A8%A1%E5%BC%8F/"/>
    <url>/blog/2022/05/17/%E6%95%91%E6%8F%B4%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="💊-CentOS-7-如何优雅的开启救援模式"><a href="#💊-CentOS-7-如何优雅的开启救援模式" class="headerlink" title="💊 CentOS 7 如何优雅的开启救援模式"></a>💊 CentOS 7 如何优雅的开启救援模式</h1><p>废话一则：如果你不是拼单身多年的手速在centos开机的0.5秒内精准的按下Esc键，或许，我们可以换一个更加优雅从容的方式，如果，你也是第一次开启救援模式。</p><p>那我们开始吧!</p><ul><li>进入VM虚拟机，在centos的日常开启的电源键，点击“打开电源时进入固件”，如下图所示：</li></ul><p><img src="%E6%95%91%E6%8F%B4%E6%A8%A1%E5%BC%8F/11-1652795362001.png"></p><ul><li>随后在centos打开“Phoenix BIOS Setup Unility”中点击“Boot”，将光盘驱动移动至第顺一位，具体如下图所示：</li></ul><p><img src="222-1652795375363.png" alt="222"></p><ul><li>F10保存，选择“Yes”，如下图所示</li></ul><p><img src="333333-1652795394553.png" alt="333333"></p><ul><li>选择“Troubleshooting”疑难杂症，如下图所示：</li></ul><p><img src="44444-1652795409637.png" alt="44444"></p><ul><li>选择“Rescue a CentOS system”,如下图所示</li></ul><p><img src="5555555-1652795415819.png" alt="5555555"></p><ul><li>如果以上操作正确，便可进入救援模式，如下图所示：</li></ul><p><img src="666666-1652795426448.png" alt="666666"></p><p>至此，CentOS 7进入救援模式便顺利完成。</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>基础篇</category>
      
      <category>实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>磁盘报警文件&amp;黑客帝国</title>
    <link href="/blog/2022/05/16/%E7%A3%81%E7%9B%98%E6%8A%A5%E8%AD%A6%E9%82%AE%E4%BB%B6&amp;%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD/"/>
    <url>/blog/2022/05/16/%E7%A3%81%E7%9B%98%E6%8A%A5%E8%AD%A6%E9%82%AE%E4%BB%B6&amp;%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="🎫磁盘报警文件-amp-黑客帝国"><a href="#🎫磁盘报警文件-amp-黑客帝国" class="headerlink" title="🎫磁盘报警文件&amp;黑客帝国"></a>🎫磁盘报警文件&amp;黑客帝国</h1><h4 id="🎈实战：配置发送邮件—磁盘报警邮件"><a href="#🎈实战：配置发送邮件—磁盘报警邮件" class="headerlink" title="🎈实战：配置发送邮件—磁盘报警邮件"></a>🎈实战：配置发送邮件—磁盘报警邮件</h4><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">vim disk_check.sh<br><span class="hljs-comment">#</span><br>WARNING=80<br><span class="hljs-keyword">while</span> ::<span class="hljs-keyword">do</span><br>  USE=<span class="hljs-built_in">df</span> | sed -rn<span class="hljs-string">&#x27;/^\/dev\/sd/s#\1#p&#x27;</span> |<span class="hljs-built_in">sort</span> -nr|<span class="hljs-built_in">head</span> -n1<br>  <span class="hljs-keyword">if</span>[ <span class="hljs-variable">$USE</span> -gt <span class="hljs-variable">$WARNING</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> Disk will be full from `hostname -I` | mail -s <span class="hljs-string">&quot;disk warning&quot;</span> 3471556804@qq.com<br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-built_in">sleep</span> 10<br><span class="hljs-keyword">done</span><br><span class="hljs-comment">#</span><br><span class="hljs-built_in">cat</span> disk_check.sh   //查看磁盘报警邮件<br></code></pre></td></tr></table></figure><h4 id="✨黑客帝国—–趣味实战"><a href="#✨黑客帝国—–趣味实战" class="headerlink" title="✨黑客帝国—–趣味实战"></a>✨黑客帝国—–趣味实战</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs clean">yum install epel-release<br>yum install dnf<br><br><br>yum install gcc<br>yum install make<br><br><br>#yum install ncurses*  # 安装相关ncurses支持包<br>#wget https:<span class="hljs-comment">//jaist.dl.sourceforge.net/project/cmatrix/cmatrix/1.2a/cmatrix-1.2a.tar.gz</span><br>#tar -zxvf cmatrix<span class="hljs-number">-1.2</span>a.tar.gz  <span class="hljs-comment">//解开压缩包</span><br>#cd cmatrix<span class="hljs-number">-1.2</span>a/   <span class="hljs-comment">//进入源目录</span><br>#./configure --prefix=/opt/cmatrix/   <span class="hljs-comment">//编译文件</span><br>#make &amp;&amp; make install    <span class="hljs-comment">// 编译且安装</span><br>#<br>#cd /opt/cmatrix/              <span class="hljs-comment">//进入目录</span><br>#./bin/cmatrix         <span class="hljs-comment">//启动</span><br><br><br>#cmatrix -b -C red<br>#cmatrix -b -C bule<br>#cmatrix -b -C purple<br></code></pre></td></tr></table></figure><p>最终效果如下图所示：</p><p><img src="%E7%A3%81%E7%9B%98%E6%8A%A5%E8%AD%A6%E9%82%AE%E4%BB%B6&%E9%BB%91%E5%AE%A2%E5%B8%9D%E5%9B%BD/3211.png"></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>基础篇</category>
      
      <category>实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>挂载和swap空间管理</title>
    <link href="/blog/2022/05/16/%E6%8C%82%E8%BD%BD%E5%92%8Cswap%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    <url>/blog/2022/05/16/%E6%8C%82%E8%BD%BD%E5%92%8Cswap%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="🎍11-5-挂载管理和swap空间管理"><a href="#🎍11-5-挂载管理和swap空间管理" class="headerlink" title="🎍11.5 挂载管理和swap空间管理"></a>🎍11.5 挂载管理和swap空间管理</h1><h1 id="🎋挂载管理"><a href="#🎋挂载管理" class="headerlink" title="🎋挂载管理"></a>🎋挂载管理</h1><h6 id="概念解析："><a href="#概念解析：" class="headerlink" title="概念解析："></a><strong>概念解析：</strong></h6><p><strong>分区VS挂载（11.5-09：00）</strong></p><p>详解：<a href="https://www.cnblogs.com/dong628/p/12149581.html">浅谈Linux分区和挂载（点） - TFLS-DJL - 博客园 (cnblogs.com)</a></p><p>挂载：设备和某文件夹建立关系，Linux系统中一切皆文件，文件的源头在”/“</p><p><strong>重点：设备和文件夹的关系？  一对多</strong></p><p>​    挂载规则：</p><figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 一个挂载点同一时间有且只能挂载一个设备（使用期间，<span class="hljs-strong">**一对一**</span>关系）<br><span class="hljs-bullet">2.</span> 一个挂载点挂载多个设备，只能看到最后一个设备数据，其他设备数据则会隐藏<br><span class="hljs-bullet">3.</span> 设备挂载点的关系：<span class="hljs-strong">**一对多**</span>，但是不能多对一<br><span class="hljs-bullet">4.</span> 通常：挂载点=已存在的空的目录<br></code></pre></td></tr></table></figure><h6 id="how-如何挂载？"><a href="#how-如何挂载？" class="headerlink" title="how 如何挂载？"></a>how 如何挂载？</h6><p>详解：<a href="https://www.cnblogs.com/chenmh/p/5097530.html">Linux 挂载管理(mount) - pursuer.chen - 博客园 (cnblogs.com)</a></p><p>how查看挂载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">fuser -v <span class="hljs-regexp">/mnt/</span>sdb1<br></code></pre></td></tr></table></figure><p><img src="image-20220516102038861.png" alt="image-20220516102038861"></p><p>how剔除挂载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">fuser -v  <span class="hljs-regexp">/mnt/</span>sdb1<br>umount <span class="hljs-regexp">/mnt/</span>sdb1<span class="hljs-regexp">/xxx.txt       /</span><span class="hljs-regexp">/取消挂载</span><br></code></pre></td></tr></table></figure><p><img src="image-20220516102057986.png" alt="image-20220516102057986"></p><p><strong>🎍永久挂载</strong>——写配置文件（11.5-28：00）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/data/my</span>sql  <span class="hljs-regexp">//</span>存放数据库<br>vim <span class="hljs-regexp">/etc/</span>fstab   <span class="hljs-regexp">//</span>永久挂载，设置挂载配置信息<br>blkid        <span class="hljs-regexp">//</span>查看<span class="hljs-string">&quot;UUID&quot;</span>编号<br>vim <span class="hljs-regexp">/etc/</span>fstab<br>:r!blkid <span class="hljs-regexp">/dev/</span>sdb1    <span class="hljs-regexp">//</span>捕获到当前位置<br>mount -a     <span class="hljs-regexp">//</span>更新<br>df<br></code></pre></td></tr></table></figure><p><img src="image-20220516102116236.png" alt="image-20220516102116236"></p><h6 id="how如何修复"><a href="#how如何修复" class="headerlink" title="how如何修复"></a>how如何修复</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">blkid   <span class="hljs-regexp">//</span>查询<br>可以直接注释挂载点 <span class="hljs-string">&quot;#&quot;</span><br></code></pre></td></tr></table></figure><h1 id="🎋swap-文件系统"><a href="#🎋swap-文件系统" class="headerlink" title="🎋swap 文件系统"></a>🎋swap 文件系统</h1><p><strong>swap作用</strong>：缓解内存紧张的特殊情况，硬盘模拟内存，将内存导入swpa分区，起到临时扩大内存的作用。</p><p><strong>swap缺点</strong> ：减缓系统运行速度（k8s会禁用）</p><p><img src="image-20220516102141955.png" alt="image-20220516102141955"></p><h6 id="how：swap如何实现？"><a href="#how：swap如何实现？" class="headerlink" title="how：swap如何实现？"></a><strong>how</strong>：swap如何实现？</h6><div class="code-wrapper"><pre><code class="hljs">              1. 创建交换分区或者文件              2. 使用mkswap写入特殊签名              3. 在/etc/fstab文件中添加适当的条目              4. 使用swapon-a激活交换空间</code></pre></div><p>查询swap</p><p><code>free -h        //查看swap</code></p><p>创建swap</p><p><code>mkswap /dev/sdc1</code></p><p>更新swap</p><p>`swapon -a ``</p><p> ``swapon -s   //查看 `</p><p>K8s禁用swap（补）</p><p><code>swapoff -a</code></p><h5 id="🎋实战：文件如何转化为swap-11-5-59：00"><a href="#🎋实战：文件如何转化为swap-11-5-59：00" class="headerlink" title="🎋实战：文件如何转化为swap(11.5-59：00)"></a>🎋<strong>实战</strong>：文件如何转化为swap(11.5-59：00)</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">dd <span class="hljs-keyword">if</span>=<span class="hljs-string">/dev/zero</span> of=<span class="hljs-string">/swapfile</span> bs=1M count=2048   <span class="hljs-string">//</span>创建文件<br>ll -h swapfile    <span class="hljs-string">//</span>相当于分区<br>mkswap <span class="hljs-string">/swapfile</span>   <span class="hljs-string">//</span>创建<br>blkid <span class="hljs-string">/swapfile</span>   <span class="hljs-string">//</span>挂载<br>vim etc/fstab<br><span class="hljs-string">/swapfile</span>  none swap   def.<span class="hljs-string">..0</span>  0    <span class="hljs-string">//</span>不是UUID<br>swapon -a<br>swapon -s<br>df<br></code></pre></td></tr></table></figure><p><strong>how如何移除swap</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">free -h<br>swapon -a   <span class="hljs-regexp">//</span>禁用<br>free -h<br>mv <span class="hljs-regexp">/swapfile /</span>data/<br>vim etc/fstab<br>修改为 <span class="hljs-regexp">/data/</span>swap<br>swapon -a<br>swapon -s<br></code></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>基础篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux基础篇·软件管理</title>
    <link href="/blog/2022/05/15/Linux%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80%E7%AF%87%C2%B711%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <url>/blog/2022/05/15/Linux%E8%BF%90%E7%BB%B4%E5%9F%BA%E7%A1%80%E7%AF%87%C2%B711%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="🎉11软件管理"><a href="#🎉11软件管理" class="headerlink" title="🎉11软件管理"></a>🎉11软件管理</h1><h2 id="🎊11-1-ubunut软件管理"><a href="#🎊11-1-ubunut软件管理" class="headerlink" title="🎊11.1 ubunut软件管理"></a>🎊11.1 ubunut软件管理</h2><p>centos和ubunut主要区别在于安装的“包”类型不同，yum和epel都是centos特有的包，而ubunut则存在其特殊的包，如（apt，dpkg等）</p><p>Linux有五种安装方法：</p><p>详解：[Linux操作系统安装的5种方法以及心得 - 云+社区 - 腾讯云 (tencent.com)](<a href="https://cloud.tencent.com/developer/article/1017354#:~:text=%E5%AE%89%E8%A3%85Linux%E5%85%B1%E6%9C%89%E4%BA%94%E7%A7%8D%E6%96%B9%E6%B3%95">https://cloud.tencent.com/developer/article/1017354#:~:text=安装Linux共有五种方法</a> 1、光盘 2、硬盘,3、NFS　映像 4、FTP 5、HTTP)</p><p>四大种类安装方法：<a href="https://blog.csdn.net/liukai6/article/details/78367804">(104条消息) Linux四种安装软件的方式_liukai6的博客-CSDN博客</a></p><ul><li>源码包</li><li>二进制包（Windows包）</li><li>yum在线安装包</li><li>脚本安装包</li></ul><h6 id="概念解析"><a href="#概念解析" class="headerlink" title="概念解析"></a>概念解析</h6><p>ubuntu软件管理 ubuntn下的软件包管理主要是基于<strong>dpkg和apt-get两个工具</strong></p><ul><li>dpkg（debian packages），是一个底层的软件管理工具，用于软件包的安装，卸载和管理。</li><li> apt-get（advanced package tool），是一个用于管理软件的命令行工具。</li></ul><p>命令解析：<a href="https://developer.aliyun.com/article/80442">Ubuntu 的软件的管理工具-阿里云开发者社区 (aliyun.com)</a></p><h6 id="unubtu-替换为国内的源"><a href="#unubtu-替换为国内的源" class="headerlink" title="unubtu 替换为国内的源"></a><strong>unubtu 替换为国内的源</strong></h6><figure class="highlight 1c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs 1c">cat /etc/apt/sources.list<br><br>sed  -i.bak &#x27;s/hk.archive.ubuntu.com/mirrors.ailyun.com/&#x27;  /etc/apt/sources.list<br><br><span class="hljs-meta">#sed  -ri.bak &#x27;s#(.*<span class="hljs-comment">//).*\.ubuntu\.com#\1mirrors.aliyun.com#&#x27;  /etc/apt/sources.list</span></span><br><span class="hljs-meta">#vim /etc/apt/sources.list    <span class="hljs-comment">//查看</span></span><br><span class="hljs-meta">#apt update</span><br><br><span class="hljs-meta"># apt install apache2 -y    <span class="hljs-comment">//下载工具</span></span><br><span class="hljs-meta">#dpkg -L apache2           <span class="hljs-comment">//查看软件安装生成的文件列表</span></span><br></code></pre></td></tr></table></figure><h6 id="how：如何彻底删除软件包"><a href="#how：如何彻底删除软件包" class="headerlink" title="how：如何彻底删除软件包"></a>how：如何彻底删除软件包</h6><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#apt remove apache2 -y     <span class="hljs-comment">//卸载软件</span></span><br><span class="hljs-meta">#dpkg -L apache2           <span class="hljs-comment">//存在残余程序</span></span><br>how<br><span class="hljs-meta">#apt purge apache2           <span class="hljs-comment">//彻底删除软件包</span></span><br></code></pre></td></tr></table></figure><h6 id="软件管理：查看文件“包”的来源"><a href="#软件管理：查看文件“包”的来源" class="headerlink" title="软件管理：查看文件“包”的来源"></a>软件管理：查看文件“包”的来源</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#dpkg</span> -S filename  <br>  <br>查找不存在文件的<span class="hljs-string">&quot;包&quot;</span>的位置<br><span class="hljs-selector-id">#apt</span> -y install apt-file       <span class="hljs-comment">//安装软件</span><br><span class="hljs-selector-id">#apt</span> update<br><span class="hljs-selector-id">#apt-file</span>  search -x  <span class="hljs-string">&#x27;/sl$&#x27;</span><br><br><span class="hljs-selector-id">#apt</span> install sl       <span class="hljs-comment">// 安装工具&quot;sl&quot;</span><br><span class="hljs-selector-id">#dpkg</span> -l sl         <span class="hljs-comment">//查看文件</span><br><br><span class="hljs-selector-id">#apt</span> show sl     <span class="hljs-comment">//查看文件</span><br><br><span class="hljs-selector-id">#sl</span>                  <span class="hljs-comment">//启动文件</span><br><span class="hljs-selector-id">#sl</span> -<span class="hljs-selector-tag">a</span>             <span class="hljs-comment">//加快文件运行</span><br></code></pre></td></tr></table></figure><h6 id="查看文件版本信息"><a href="#查看文件版本信息" class="headerlink" title="查看文件版本信息"></a>查看文件版本信息</h6><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts">apt-cache madison docker-ce<br>cat <span class="hljs-keyword">/etc/</span>apt/sources.list  <span class="hljs-comment">//列出list</span><br><br><span class="hljs-comment">//安装指定版本</span><br><span class="hljs-meta">#apt -y install docker-ce=5:19.03~3-0~ubuntu-bionic</span><br></code></pre></td></tr></table></figure><h1 id="🎃11-2磁盘类型和结构"><a href="#🎃11-2磁盘类型和结构" class="headerlink" title="🎃11.2磁盘类型和结构"></a>🎃11.2磁盘类型和结构</h1><h6 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h6><ul><li>盘片</li><li>磁道、扇区</li><li>柱面</li></ul><img src="11%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86/image-20220515212722270.png" alt="image-20220515212722270" style="zoom:67%;" /><p><strong>what</strong>：何为磁盘</p><p>详解：<a href="https://zhuanlan.zhihu.com/p/89505052">磁盘原理介绍 - 知乎 (zhihu.com)</a> </p><p><strong>what</strong>：何为磁盘详解：</p><p>🎇如何设置磁盘</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">设置<span class="hljs-regexp">/添加/</span>硬盘<span class="hljs-regexp">/选择SCSI/</span>点击下一步<span class="hljs-regexp">/创建新的虚拟磁盘/</span><span class="hljs-number">20</span>G，<span class="hljs-number">10</span>G 将虚拟机磁盘存储为单个文件<span class="hljs-regexp">/下一步/</span>完成/<br><br>alias scandisk       <span class="hljs-regexp">//</span>查看命令格式<br>echo <span class="hljs-string">&#x27;- - - &#x27;</span> &gt; <span class="hljs-regexp">/sys/</span>class<span class="hljs-regexp">/scsi_host/</span>host1/scan<br>echo <span class="hljs-string">&#x27;- - - &#x27;</span> &gt; <span class="hljs-regexp">/sys/</span>class<span class="hljs-regexp">/scsi_host/</span>host2/scan<br>lsblk    <span class="hljs-regexp">//</span>显示磁盘<br></code></pre></td></tr></table></figure><h6 id="概念区分：块设备-VS-字符设备"><a href="#概念区分：块设备-VS-字符设备" class="headerlink" title="概念区分：块设备 VS 字符设备"></a>概念区分：块设备 VS 字符设备</h6><p>详解：<a href="https://www.cnblogs.com/qlee/archive/2011/07/27/2118406.html">字符设备和块设备的区别 - 李大嘴 - 博客园 (cnblogs.com)</a>  </p><ul><li><p>块设备：由硬件设备组成，所占内存更小，访问速度更快，没有固定的访问顺序。</p></li><li><p>字符设备：数据由字符组成，访问时有一定的循序，不占缓存。</p></li></ul><p><strong>如何识别linux 磁盘类型</strong></p><p>详解：<a href="https://www.cnblogs.com/qlee/archive/2011/07/27/2118406.html">字符设备和块设备的区别 - 李大嘴 - 博客园 (cnblogs.com)</a></p><h6 id="硬盘的分类"><a href="#硬盘的分类" class="headerlink" title="硬盘的分类"></a><strong>硬盘的分类</strong></h6><p>详解：<a href="https://zhuanlan.zhihu.com/p/63234450">硬盘三大种类（SSD；HHD；HDD） - 知乎 (zhihu.com)</a></p><p>“机械硬盘”数据优化：”外盘”数据量大导致访问速度更快，将经常访问的数据放置“外盘”。</p><p><strong>how</strong></p><p>如何查看“CHS”（柱面，磁头，扇区）——最大寻址空间8GB</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#fdisk -u=cylinder -l</span><br><span class="hljs-meta">#fdisk -l</span><br><br>查询固态硬盘 VS 机械硬盘<br><span class="hljs-meta">#lsblk -d -o name,rota</span><br><span class="hljs-string">&quot;1&quot;</span>代表机械硬盘<br></code></pre></td></tr></table></figure><p><strong>how</strong> 如何使用磁盘空间？</p><ul><li>设备分区</li><li>创建文件系统</li><li>挂载新的文件系统</li></ul><p><strong>why</strong> 为何分为？</p><ul><li>优化I/O性能</li><li>实现磁盘空间配额</li><li>限制隔离系统和程序</li><li>安装多系统OS</li><li>采用不用文件系统</li></ul>]]></content>
    
    
    <categories>
      
      <category>基础篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linxu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何搭建个人网站-gitpages</title>
    <link href="/blog/2022/05/12/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99-gitpages/"/>
    <url>/blog/2022/05/12/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99-gitpages/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>完全免费的git网站搭建, 参考 <a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><p>实现的目标: 本地写markdown, 推送github即可以看 github.io 域名查看网页。</p><p>实现的工具</p><ul><li><code>nodejs</code>           hexo生成网站</li><li><code>codeup.aliyun.com</code>    保存自己的博客代码</li><li><code>github.com</code>   静态页面展示 </li><li><code>vscode</code>   开发工具</li></ul><span id="more"></span><h1 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h1><p>参考  <a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a> 确保访问OK</p><p>slcnx.github.io 仓库名</p><p>准备index.html</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  hello world<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="20220512214701-16524035403072.png" alt="image-20220512214700115"></p><p><img src="20220512214623.png" alt="image-20220512214617755"></p><h1 id="docker推送github"><a href="#docker推送github" class="headerlink" title="docker推送github"></a>docker推送github</h1><p>新建临时目录，vscode打开, 准备以下文件</p><p>id_rsa_2048 <strong>需要linux生成或xshell生成，不可以自己生成</strong></p><p>id_rsa_2048的公钥加入到以上仓库中</p><p><img src="20220512225649.png" alt="image-20220512225647448"></p><p>Dockerfile</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">FROM</span> node:latest<br><br><br>WORKDIR /data/git <br><br><span class="hljs-built_in">ADD</span> id_rsa_2048 /root/.ssh/<br><span class="hljs-built_in">RUN</span>  chmod 600 /root/.ssh/id_rsa_2048 <br><br><span class="hljs-built_in">ADD</span> . ./<br><br><span class="hljs-comment"># 生成网页</span><br><span class="hljs-comment">#RUN npm run build </span><br><br><br><span class="hljs-comment"># 上传到GIT</span><br><br><span class="hljs-built_in">RUN</span> install -dv /data/page/ &amp;&amp; cp -a index.html /data/page/<br><br><br>WORKDIR /data/page/<br>ENV <span class="hljs-attribute">GIT_SSH_COMMAND</span>=<span class="hljs-string">&#x27;ssh -i /root/.ssh/id_rsa_2048  -o IdentitiesOnly=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no&#x27;</span><br><span class="hljs-built_in">RUN</span> git<span class="hljs-built_in"> config </span>--global init.defaultBranch main &amp;&amp; git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">&#x27;2192383945@qq.com&#x27;</span> &amp;&amp; git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">&#x27;songliangcheng&#x27;</span>  &amp;&amp; \<br>    git<span class="hljs-built_in"> config </span>--global pull.rebase <span class="hljs-literal">true</span> &amp;&amp; \<br>    git init &amp;&amp; \<br>    git remote <span class="hljs-built_in">add</span> origin git@github.com:slcnx/slcnx.github.io.git &amp;&amp; git <span class="hljs-built_in">add</span> -A &amp;&amp; git commit -m init &amp;&amp; git push --force origin main <br></code></pre></td></tr></table></figure><p>index.html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    cat<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">D:\vscode_projects\myblog&gt;docker build -t <span class="hljs-built_in">test</span> .<br></code></pre></td></tr></table></figure><p><img src="20220512223352.png" alt="image-20220512223351323"></p><h1 id="本地生成hexo仓库"><a href="#本地生成hexo仓库" class="headerlink" title="本地生成hexo仓库"></a>本地生成hexo仓库</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br><br><span class="hljs-comment"># 当前目录为项目根</span><br>hexo init test1blog<br><span class="hljs-built_in">cd</span> test1blog<br><br><span class="hljs-comment"># 内容</span><br>$ <span class="hljs-built_in">ls</span><br>_config.landscape.yml  node_modules/  package-lock.json  <span class="hljs-built_in">source</span>/<br>_config.yml            package.json   scaffolds/         themes/<br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p><img src="20220512224452.png" alt="image-20220512224451207"></p><h2 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h2><p>在以上目录 <code>test1blog</code> 中生成以下文件</p><ol><li><p><code>.dockerignore</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">node_modules/<br></code></pre></td></tr></table></figure></li><li><p><code>Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:latest<br><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /data/git </span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> id_rsa_2048 /root/.ssh/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash">  <span class="hljs-built_in">chmod</span> 600 /root/.ssh/id_rsa_2048 </span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . ./</span><br><br><span class="hljs-comment"># 生成网页</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install &amp;&amp; npm run build </span><br><br><span class="hljs-comment"># 上传到GIT</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> install -dv /data/page/ &amp;&amp; <span class="hljs-built_in">cp</span> -a public /data/page/</span><br><br><span class="hljs-keyword">ARG</span> GITHUB<br><span class="hljs-keyword">ARG</span> GUSER <br><span class="hljs-keyword">ARG</span> EMAIL <br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /data/page/public/</span><br><span class="hljs-keyword">ENV</span> GIT_SSH_COMMAND=<span class="hljs-string">&#x27;ssh -i /root/.ssh/id_rsa_2048  -o IdentitiesOnly=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no&#x27;</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> git config --global init.defaultBranch main &amp;&amp; git config --global user.email <span class="hljs-variable">$EMAIL</span>  &amp;&amp; git config --global user.name <span class="hljs-variable">$GUSER</span>  &amp;&amp; \</span><br><span class="language-bash">    git config --global pull.rebase <span class="hljs-literal">true</span> &amp;&amp; \</span><br><span class="language-bash">    git init &amp;&amp; \</span><br><span class="language-bash">    git remote add origin <span class="hljs-variable">$GITHUB</span> &amp;&amp; git add -A &amp;&amp; git commit -m init &amp;&amp; git push --force origin main </span><br></code></pre></td></tr></table></figure></li><li><p><code>id_rsa_2048</code> 以上与github互通的密钥</p></li><li><p>发布</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker build <span class="hljs-attr">--build-arg</span> GITHUB=git@github<span class="hljs-selector-class">.com</span>:slcnx/slcnx<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.git</span> <span class="hljs-attr">--build-arg</span> EMAIL=<span class="hljs-string">&#x27;2192383945@qq.com&#x27;</span> <span class="hljs-attr">--build-arg</span> GUSER=<span class="hljs-string">&#x27;songliangcheng&#x27;</span> ./<br></code></pre></td></tr></table></figure></li></ol><p><img src="20220512225143.png" alt="image-20220512225141348"></p><h1 id="codeup一键发布"><a href="#codeup一键发布" class="headerlink" title="codeup一键发布"></a>codeup一键发布</h1><h2 id="添加codeup仓库"><a href="#添加codeup仓库" class="headerlink" title="添加codeup仓库"></a>添加codeup仓库</h2><p>将当前仓库加入到自己的codeup中</p><p><img src="20220512230442.png" alt="image-20220512230441057"></p><p>复制https地址 <a href="https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-12.git">https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-12.git</a></p><h2 id="初始化代码"><a href="#初始化代码" class="headerlink" title="初始化代码"></a>初始化代码</h2><p>将上面test1blog中，初始化，添加代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global init.defaultBranch main<br>git init<br>git remote add origin https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-12.git<br></code></pre></td></tr></table></figure><p>添加文件 <code>.gitignore</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Logs</span><br>logs<br>*.<span class="hljs-built_in">log</span><br>npm-debug.log*<br>yarn-debug.log*<br>yarn-error.log*<br>lerna-debug.log*<br>.pnpm-debug.log*<br><br><span class="hljs-comment"># Diagnostic reports (https://nodejs.org/api/report.html)</span><br>report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json<br><br><span class="hljs-comment"># Runtime data</span><br>pids<br>*.pid<br>*.seed<br>*.pid.lock<br><br><span class="hljs-comment"># Directory for instrumented libs generated by jscoverage/JSCover</span><br>lib-cov<br><br><span class="hljs-comment"># Coverage directory used by tools like istanbul</span><br>coverage<br>*.lcov<br><br><span class="hljs-comment"># nyc test coverage</span><br>.nyc_output<br><br><span class="hljs-comment"># Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)</span><br>.grunt<br><br><span class="hljs-comment"># Bower dependency directory (https://bower.io/)</span><br>bower_components<br><br><span class="hljs-comment"># node-waf configuration</span><br>.lock-wscript<br><br><span class="hljs-comment"># Compiled binary addons (https://nodejs.org/api/addons.html)</span><br>build/Release<br><br><span class="hljs-comment"># Dependency directories</span><br>node_modules/<br>jspm_packages/<br><br><span class="hljs-comment"># Snowpack dependency directory (https://snowpack.dev/)</span><br>web_modules/<br><br><span class="hljs-comment"># TypeScript cache</span><br>*.tsbuildinfo<br><br><span class="hljs-comment"># Optional npm cache directory</span><br>.npm<br><br><span class="hljs-comment"># Optional eslint cache</span><br>.eslintcache<br><br><span class="hljs-comment"># Optional stylelint cache</span><br>.stylelintcache<br><br><span class="hljs-comment"># Microbundle cache</span><br>.rpt2_cache/<br>.rts2_cache_cjs/<br>.rts2_cache_es/<br>.rts2_cache_umd/<br><br><span class="hljs-comment"># Optional REPL history</span><br>.node_repl_history<br><br><span class="hljs-comment"># Output of &#x27;npm pack&#x27;</span><br>*.tgz<br><br><span class="hljs-comment"># Yarn Integrity file</span><br>.yarn-integrity<br><br><span class="hljs-comment"># dotenv environment variable files</span><br>.<span class="hljs-built_in">env</span><br>.env.development.local<br>.env.test.local<br>.env.production.local<br>.env.local<br><br><span class="hljs-comment"># parcel-bundler cache (https://parceljs.org/)</span><br>.cache<br>.parcel-cache<br><br><span class="hljs-comment"># Next.js build output</span><br>.next<br>out<br><br><span class="hljs-comment"># Nuxt.js build / generate output</span><br>.nuxt<br>dist<br><br><span class="hljs-comment"># Gatsby files</span><br>.cache/<br><span class="hljs-comment"># Comment in the public line in if your project uses Gatsby and not Next.js</span><br><span class="hljs-comment"># https://nextjs.org/blog/next-9-1#public-directory-support</span><br><span class="hljs-comment"># public</span><br><br><span class="hljs-comment"># vuepress build output</span><br>.vuepress/dist<br><br><span class="hljs-comment"># vuepress v2.x temp and cache directory</span><br>.temp<br>.cache<br><br><span class="hljs-comment"># Docusaurus cache and generated files</span><br>.docusaurus<br><br><span class="hljs-comment"># Serverless directories</span><br>.serverless/<br><br><span class="hljs-comment"># FuseBox cache</span><br>.fusebox/<br><br><span class="hljs-comment"># DynamoDB Local files</span><br>.dynamodb/<br><br><span class="hljs-comment"># TernJS port file</span><br>.tern-port<br><br><span class="hljs-comment"># Stores VSCode versions used for testing VSCode extensions</span><br>.vscode-test<br><br><span class="hljs-comment"># yarn v2</span><br>.yarn/cache<br>.yarn/unplugged<br>.yarn/build-state.yml<br>.yarn/install-state.gz<br>.pnp.*<br><br><br><span class="hljs-comment"># 静态文件</span><br>public <br></code></pre></td></tr></table></figure><h2 id="推送aliyun"><a href="#推送aliyun" class="headerlink" title="推送aliyun"></a>推送aliyun</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 状态</span><br>$ git status<br>hint: core.useBuiltinFSMonitor will be deprecated soon; use core.fsmonitor instead<br>hint: Disable this message with <span class="hljs-string">&quot;git config advice.useCoreFSMonitorConfig false&quot;</span><br>On branch main<br><br>No commits yet<br><br>Untracked files:<br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="hljs-keyword">in</span> what will be committed)<br>        .dockerignore<br>        .github/<br>        .gitignore<br>        .npmignore<br>        Dockerfile<br>        _config.landscape.yml<br>        _config.yml<br>        db.json<br>        id_rsa_2048<br>        package-lock.json<br>        package.json<br>        scaffolds/<br>        <span class="hljs-built_in">source</span>/<br>        themes/<br>        <br><span class="hljs-comment"># 生成标志</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;1111&#x27;</span> &gt;&gt; <span class="hljs-built_in">source</span>/_posts/hello-world.md<br><br><span class="hljs-comment"># 推送</span><br>git add . <br>git commit -m init<br><br>$ git push origin main<br>Enumerating objects: 122, <span class="hljs-keyword">done</span>.<br>Counting objects: 100% (122/122), <span class="hljs-keyword">done</span>.<br>Delta compression using up to 8 threads<br>Compressing objects: 100% (110/110), <span class="hljs-keyword">done</span>.<br>Writing objects: 100% (122/122), 580.00 KiB | 7.34 MiB/s, <span class="hljs-keyword">done</span>.<br>Total 122 (delta 0), reused 0 (delta 0), pack-reused 0<br>To https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-12.git<br> * [new branch]      main -&gt; main<br><br></code></pre></td></tr></table></figure><h2 id="aliyun验证"><a href="#aliyun验证" class="headerlink" title="aliyun验证"></a>aliyun验证</h2><p><img src="20220512231059.png" alt="image-20220512231058218"></p><h2 id="添加流水线"><a href="#添加流水线" class="headerlink" title="添加流水线"></a>添加流水线</h2><p><img src="20220512231120.png" alt="image-20220512231118465"></p><p><img src="20220512231146.png" alt="image-20220512231145367"></p><p><img src="20220513000840.png" alt="image-20220513000838863"></p><p><img src="20220512231255.png" alt="image-20220512231253578"></p><p><img src="20220512231628.png" alt="image-20220512231626849"></p><p>删除kubernetes发布</p><p>保存并运行</p><p><img src="20220512231324.png" alt="image-20220512231322519"></p><h2 id="查看运行日志"><a href="#查看运行日志" class="headerlink" title="查看运行日志"></a>查看运行日志</h2><p><img src="20220512232021.png" alt="image-20220512232019242"></p><h2 id="查看github进度"><a href="#查看github进度" class="headerlink" title="查看github进度"></a>查看github进度</h2><p><img src="20220512232122.png" alt="image-20220512232121239"></p><h2 id="查看页面"><a href="#查看页面" class="headerlink" title="查看页面"></a>查看页面</h2><p>当进度为</p><p><img src="20220512232141.png" alt="image-20220512232140087"></p><p><img src="20220512232151.png" alt="image-20220512232150142"></p><h1 id="开发方式"><a href="#开发方式" class="headerlink" title="开发方式"></a>开发方式</h1><h2 id="准备vscode"><a href="#准备vscode" class="headerlink" title="准备vscode"></a>准备vscode</h2><p>在vscode中加载 codeup的仓库</p><p>安装插件 typora  <strong>安装后需要重启vscode</strong></p><p><img src="20220512231737.png" alt="image-20220512231735959"></p><h2 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># clone 代码</span><br><br><span class="hljs-comment"># 安装依赖</span><br>npm install<br><br><span class="hljs-comment"># 运行服务</span><br>npx hexo server<br></code></pre></td></tr></table></figure><blockquote><p><code>npx command</code> 相当于加载了<code>$(npm bin)</code> 目录到环境变量, 后面的命令可以执行</p></blockquote><p>通过本地调试出合理的界面, 推送aliyun, 就可以一键发布</p><h2 id="本地添加文章"><a href="#本地添加文章" class="headerlink" title="本地添加文章"></a>本地添加文章</h2><p>脚本 <code>addarticle.sh</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo -ne <span class="hljs-string">&quot;Enter a \033[1;31mtitle\033[0m for your blog: &quot;</span>; read title<br>[ $? -ne <span class="hljs-number">0</span> ] &amp;&amp; echo <span class="hljs-string">&#x27;exit&#x27;</span> &amp;&amp; sleep <span class="hljs-number">3</span> &amp;&amp; <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br>[ -z <span class="hljs-string">&quot;$title&quot;</span> ] &amp;&amp; echo title must be exists. &amp;&amp; sleep <span class="hljs-number">3</span> &amp;&amp; <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br>npx hexo new <span class="hljs-string">&quot;$title&quot;</span><br><br>start $(readlink -f .)<span class="hljs-regexp">/source/</span>_posts<br></code></pre></td></tr></table></figure><p>生成文章, 运行脚本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">第1个文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-05-12 23:27:58</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h2 id="个性化页面展示"><a href="#个性化页面展示" class="headerlink" title="个性化页面展示"></a>个性化页面展示</h2><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><ul><li><code>hexo站点配置</code></li><li><code>fluid</code>主题配置</li><li><code>阅读量</code></li><li><code>评论功能</code></li></ul><p>例如修改标题 <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;5-12 23:30&quot;</span><br><span class="hljs-comment"># ...</span><br><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 处理typora相对路径</span><br>npm install hexo-typora-asset --registry https://registry.npmjs.org --save<br></code></pre></td></tr></table></figure><p>typora中的配置</p><p><img src="image-20220513092438970.png" alt="image-20220513092438970"></p><p>重启 <code>npx hexo server</code></p><p><img src="20220512233119.png" alt="image-20220512233117729"></p><h2 id="文章默认页面-可选"><a href="#文章默认页面-可选" class="headerlink" title="文章默认页面(可选)"></a>文章默认页面(可选)</h2><p><a href="https://hexo.io/docs/writing#Scaffolds">https://hexo.io/docs/writing#Scaffolds</a></p><p>当我们写大量的文章,发现主页不应该显示所有内容,需要readmore, readmore之前有1小段简介</p><p>如下, 上面的nginx文章会<code>显示标题,简介,readmore</code>, 而下面的hello world就显示所有, 这两者区别在于</p><p>后者,默认</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">第1个文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-05-12 23:27:58</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>前者</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">第1个文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-05-12 23:27:58</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hello</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># 背景</span><br><br><span class="hljs-string">这篇讲解如何编译安装nginx,</span> <span class="hljs-string">优化nginx</span><br><br><span class="hljs-string">&lt;!--more--&gt;</span><br></code></pre></td></tr></table></figure><p><img src="20220512234116.png" alt="image-20220512234114962"></p><p>要实现每个文章创建均生成nginx这样的模板, 编辑 <code>scaffolds/post.md</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> &#123;&#123; <span class="hljs-string">title</span> &#125;&#125;<br><span class="hljs-attr">date:</span> &#123;&#123; <span class="hljs-string">date</span> &#125;&#125;<br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># 背景</span><br><br><span class="hljs-string">&lt;!--more--&gt;</span><br></code></pre></td></tr></table></figure><p>现在运行脚本 <code>addarticle.sh</code> 添加<strong>第2个文章</strong></p><p>网页已经达到效果</p><p><img src="20220512234553.png" alt="image-20220512234551537"></p><h2 id="准备一个主题-fluid"><a href="#准备一个主题-fluid" class="headerlink" title="准备一个主题 fluid"></a>准备一个主题 fluid</h2><blockquote><p>使用此主题后, 不需要前面的文章默认页面, 每个页面不需要加<code>&lt;!--more--&gt;</code> 主题会自动抽取前多少个字符,作为描述的.</p></blockquote><p>Fluid主题 <a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git submodule add https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fluid-dev/</span>hexo-theme-fluid.git themes/fluid<br></code></pre></td></tr></table></figure><p>编辑 <code>_config.yml</code></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Extensions<br>## Plugins: https:<span class="hljs-comment">//hexo.io/plugins/</span><br>## Themes: https:<span class="hljs-comment">//hexo.io/themes/</span><br>theme: fluid<br></code></pre></td></tr></table></figure><p>重启 <code>npx hexo server</code></p><p><img src="20220512235039.png" alt="image-20220512235038001"></p><p>配置主题 <code>fluid</code> 需要准备一个文件 <code>_config.主题名.yml</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp themes<span class="hljs-regexp">/fluid/</span>_config.yml _config.fluid.yml<br></code></pre></td></tr></table></figure><p>测试配置是否生效,修改 <code>_config.fluid.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 首页副标题的独立设置</span><br><span class="hljs-comment"># Independent config of home page subtitle</span><br><span class="hljs-attr">slogan:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span><br>  <span class="hljs-comment"># If empty, text based on `subtitle` in hexo config</span><br>  <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;Hello 05-12 .... &quot;</span><br></code></pre></td></tr></table></figure><p>重启 <code>npx hexo server</code></p><p><img src="20220512235647.png" alt="image-20220512235645718"></p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>准备脚本 <code>push.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>git config --<span class="hljs-built_in">local</span> pull.rebase <span class="hljs-literal">true</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;笔记本-`date +%F_%T`&quot;</span><br><br><br>git push origin main<br><br>git pull origin main<br>[ $? -ne 0 ] &amp;&amp; <span class="hljs-built_in">exit</span> -1<br><br>git push origin main<br><br><span class="hljs-comment"># test</span><br>start $(<span class="hljs-built_in">readlink</span> -f .)/source/_posts<br></code></pre></td></tr></table></figure><p><a href="https://slcnx.github.io/">https://slcnx.github.io/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
